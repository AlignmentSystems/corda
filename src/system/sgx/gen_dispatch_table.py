#!/usr/bin/env python

# Generate a static symbol table suitable for an environment with no runtime dynamic linker.
# The table must be sorted as we scan it using a binary search.

import os

cmd = "nm --defined-only ../../../build/linux-x86_64-debug-openjdk-src/libavian.a | awk '{print $3}' | egrep '^(Avian|Java|JVM)_.*'"
fname = "dispatch_table.txt"
os.system("echo '# This file lists all the JNI symbols that can be looked up. It was generated by gen_dispatch_table.py' >%s; %s >> %s" % (fname, cmd, fname))

entries = [l.strip() for l in open(fname, "r").readlines() if not l.startswith("#")]
entries.sort()
template_lines = file("dispatch_table.cpp.template").readlines()
externs_index = template_lines.index("// EXTERNS HERE\n")
externs = ["void %s();\n" % entry for entry in entries]
template_lines[externs_index:externs_index + 1] = externs
dispatch_entries = ["{ \"%s\", vm::voidPointer(%s) },\n" % (e, e) for e in entries]
dispatch_entries_index = template_lines.index("// ENTRIES HERE\n")
template_lines[dispatch_entries_index:dispatch_entries_index + 1] = dispatch_entries
file("dispatch_table.cpp", "w").writelines(template_lines)