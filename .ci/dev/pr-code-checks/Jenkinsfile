#!groovy
/**
 * Jenkins pipeline to run basic code checks.
 */

/**
 * Kill already started job.
 * Assume new commit takes precendence and results from previous
 * unfinished builds are not required.
 * This feature doesn't play well with disableConcurrentBuilds() option
 */
@Library('corda-shared-build-pipeline-steps')
import static com.r3.build.BuildControl.killAllExistingBuildsForJob
killAllExistingBuildsForJob(env.JOB_NAME, env.BUILD_NUMBER.toInteger())

pipeline {
    agent { label 'standard' }
    options {
        timestamps()
        timeout(time: 3, unit: 'HOURS')
    }

    environment {
        PR_CONTEXT_STRING = "PR Code Checks"
    }

    stages {
        stage('Detekt check') {
            steps {
                /**
                 * Since this build starts Gradle multiple times,
                 * *do* start it as a daemon.
                 */
                sh "./gradlew clean detekt"
            }
        }

        stage('Compilation warnings check') {
            steps {
                sh "./gradlew -Pcompilation.warningsAsErrors=true compileAll"
            }
        }

        stage('Sonatype Check') {
            steps {
                sh "./gradlew --info " +
                        "-Pcompilation.warningsAsErrors=false " +
                        "-Ptests.failFast=true " +
                        "jar"
                nexusPolicyEvaluation (
                        failBuildOnNetworkError: false,
                        iqApplication: selectedApplication('test-build'),
                        iqScanPatterns: [[scanPattern: 'node/capsule/build/libs/corda*.jar']],
                        iqStage: 'build'
                )
            }
        }

        stage('No API change check') {
            steps {
                sh "./gradlew generateApi"
                sh ".ci/check-api-changes.sh"
            }
        }

        stage('Deploy Nodes') {
            steps {
                sh "./gradlew jar deployNodes"
            }
        }
    }

    post {
        always {
            /**
             * Make sure Gradle daemon is stopped after this build
             */
            sh "./gradlew --stop"
        }
        cleanup {
            deleteDir() /* clean up our workspace */
        }
    }
}
