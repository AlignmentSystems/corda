apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.quasar-utils'

description 'Experiment to make out-of-node RPC processing'

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

sourceSets {
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
        resources {
            srcDir file('src/integration-test/resources')
        }
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // TODO: Eliminate this dependency and relocate all the necessary classes into an independent module
    cordaCompile(project(':node')) {
         // The Node only needs this for binary compatibility with Cordapps written in Kotlin 1.1.
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jre8'
    }

    // Logging
    compile "org.slf4j:log4j-over-slf4j:$slf4j_version"
    compile "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"
    compile "org.apache.logging.log4j:log4j-core:$log4j_version"

    // PicoCli: command line option parsing
    compile "info.picocli:picocli:$picocli_version"

    integrationTestCompile project(":test-utils")
    integrationTestCompile project(":node-driver")
    compile project(":experimental:flow-worker")
    compile project(":bridge")

    testImplementation "junit:junit:$junit_version"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${junit_vintage_version}"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:${junit_platform_version}"
}

jar {
    archiveName = "${project.name}.jar"
    manifest {
        attributes(
                'Main-Class': 'net.corda.rpcWorker.RpcWorker',
                'Implementation-Title': "RpcWorker",
                'Implementation-Version': rootProject.version
        )
    }
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

cordapp {
    info {
        name "net/corda/experimental/rpc-worker"
        vendor "R3"
        targetPlatformVersion corda_platform_version.toInteger()
        minimumPlatformVersion 1
    }
}