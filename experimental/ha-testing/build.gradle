/*
 * R3 Proprietary and Confidential
 *
 * Copyright (c) 2018 R3 Limited.  All rights reserved.
 *
 * The intellectual and technical concepts contained herein are proprietary to R3 and its suppliers and are protected by trade secret law.
 *
 * Distribution of this file or any portion thereof via any medium without the express permission of R3 is strictly prohibited.
 */

buildscript {
    // For sharing constants between builds
    Properties constants = new Properties()
    file("$projectDir/../../constants.properties").withInputStream { constants.load(it) }

    ext.kotlin_version = constants.getProperty("kotlinVersion")
    ext.byteman_version = "4.0.2"

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'
apply plugin: 'idea'
apply plugin: 'net.corda.plugins.cordapp'

description 'A set of tools to perform Nodes High Availability testing'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    cordaCompile project(":client:rpc")
    cordaCompile project(":finance")

    // Logging
    compile "org.slf4j:log4j-over-slf4j:$slf4j_version"
    compile "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"
    compile "org.apache.logging.log4j:log4j-core:$log4j_version"

    // JOptSimple: command line option parsing
    compile "net.sf.jopt-simple:jopt-simple:$jopt_simple_version"

    // Byteman for runtime (termination) rules injection on the running node
    //compile "org.jboss.byteman:byteman:$byteman_version"
}

jar {
    archiveName = "${project.name}.jar"
    manifest {
        attributes(
                'Main-Class': 'net.corda.haTesting.Main',
                'Implementation-Title': "HA Testing",
                'Implementation-Version': rootProject.version
        )
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}