buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.spotify:docker-client:8.14.5'
    }
}


import com.spotify.docker.client.DefaultDockerClient
import com.spotify.docker.client.DockerClient
import com.spotify.docker.client.ProgressHandler
import com.spotify.docker.client.exceptions.DockerException
import com.spotify.docker.client.messages.ProgressMessage
import com.spotify.docker.client.messages.RegistryAuth

import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.util.stream.Collectors

evaluationDependsOn(":node:capsule")
evaluationDependsOn(":tools:dbmigration")

apply plugin: 'kotlin'
apply plugin: 'application'
// We need to set mainClassName before applying the shadow plugin.
mainClassName = 'net.corda.core.ConfigExporterMain'
apply plugin: 'com.github.johnrengelman.shadow'


dependencies {
    compile project(':node')
}

shadowJar {
    baseName = 'config-exporter'
    classifier = null
    version = null
    zip64 true
}

task buildDockerFolder(dependsOn: [":node:capsule:buildCordaJAR", shadowJar, ":tools:dbmigration:shadowJar", ":bridge:bridgecapsule:buildFirewallJar"]) {
    doLast {
        def cordaJar = project(":node:capsule").buildCordaJAR.archivePath
        def dbmigrator = project(":tools:dbmigration").shadowJar.archivePath
        def firewall = project(":bridge:bridgecapsule").buildFirewallJar.archivePath
        project.copy {
            into new File(project.buildDir, "docker-temp")
            from "src/bash/run-corda.sh"
            from "src/bash/run-firewall.sh"
            from "src/bash/db-migrate-create-jars.sh"
            from "src/bash/db-migrate-execute-migration.sh"
            from cordaJar
            from shadowJar.archivePath
            from dbmigrator
            from firewall
            from "src/config/starting-node.conf"
            from "src/bash/generate-config.sh"
            from "src/docker/DockerfileCorretto"
            from "src/docker/DockerfileUbuntuZulu"
            from "src/docker/DockerfileAlpineZulu"
            from "src/docker/FirewallDockerfileCorretto"
            rename(cordaJar.name, "corda.jar")
            rename(dbmigrator.name, "database-manager.jar")
            rename(firewall.name, "corda-firewall.jar")
            rename(shadowJar.archivePath.name, "config-exporter.jar")
        }
    }
}

final String runTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMddHHmmss"))
final String suffix = project.version.toString().toLowerCase().contains("snapshot") ? runTime : "RELEASE"

final String nodeImageBase = "entdocker.corda.r3cev.com/corda-enterprise"
final String firewallImageBase = "entdocker.corda.r3cev.com/corda-firewall"

enum BASE {
    ALPINE_ZULU("alpine-zulu"),
    UBUNTU_ZULU("ubunut-zulu"),
    AL_CORRETTO("corretto"),
    OFFICIAL("")
    private String knownAs

    String versionString(String baseTag, String version) {
        return "${baseTag}-${knownAs}" +
                "${knownAs.isEmpty() ? "" : "-"}" +
                "${version}"
    }

    BASE(String knownAs) {
        this.knownAs = knownAs
    }
}

static Iterable<String> buildTags(String imageName, String suffix) {
    return [suffix, "latest"].stream().map({ toAppend -> "${imageName}:${toAppend}".toString() }).collect(Collectors.toList())
}

static List<String> buildImages(String baseTag, String suffix, String version, Map<BASE, Tuple2<java.nio.file.Path, String>> imagesToBuild) {
    final List<String> tagsToScan = new ArrayList()
    imagesToBuild.forEach({ base, filePair ->
        java.nio.file.Path buildDir = filePair.first
        String dockerFile = filePair.second
        String imageName = base.versionString(baseTag, version)
                Iterable<String> tags = buildTags(imageName, suffix)
        buildImage(buildDir, dockerFile, tags)
        tagsToScan.addAll(tags)
    })
    return tagsToScan
}


static buildImage(java.nio.file.Path dir, String dockerFile, Iterable<CharSequence> tags) {
    println("Building image from ${dir.toAbsolutePath().toString()} using Dockerfile: ${dockerFile}")
    final DockerClient docker = DefaultDockerClient.fromEnv().build()
    def builtImageId = docker.build(dir, null, dockerFile, new ProgressHandler() {
        @Override
        void progress(ProgressMessage message) throws DockerException {
            if (message.error() != null) {
                throw new RuntimeException(message.error())
            } else if (message.stream() != null) {
                print(message.stream())
            } else if (message.progress() != null) {
                print(message.progress())
            }
        }
    })
    for (String tag : tags) {
        println("Tagging ${builtImageId} as: ${tag}")
        docker.tag(builtImageId, tag)
    }
}

static pushImages(Iterable<CharSequence> tags) {
    final DockerClient docker = DefaultDockerClient.fromEnv().build()
    for (String tag : tags) {
        println("Pushing tag: ${tag}")
        docker.push(tag, RegistryAuth.create(System.env.DOCKER_USERNAME, System.env.DOCKER_PASSWORD, null, null, null, null))
    }
}

def dockerTempDir = new File(project.buildDir, "docker-temp")
final List<String> tagsBuilt = new ArrayList<String>()

task buildAllImages(dependsOn: [buildDockerFolder]) {
    doLast {
        def dockerDirectory = dockerTempDir.toPath()
        Map<BASE, Tuple2<java.nio.file.Path, String>> nodeTaskMap = [
                (BASE.ALPINE_ZULU): new Tuple2<>(dockerDirectory, "DockerfileAlpineZulu"),
                (BASE.UBUNTU_ZULU): new Tuple2<>(dockerDirectory, "DockerfileUbuntuZulu"),
                (BASE.AL_CORRETTO): new Tuple2<>(dockerDirectory, "DockerfileCorretto"),
                (BASE.OFFICIAL)   : new Tuple2<>(dockerDirectory, "DockerfileCorretto")
        ]

        Map<BASE, Tuple2<java.nio.file.Path, String>> firewallTaskMap = [
                (BASE.AL_CORRETTO): new Tuple2<>(dockerDirectory, "FirewallDockerfileCorretto"),
                (BASE.OFFICIAL)   : new Tuple2<>(dockerDirectory, "FirewallDockerfileCorretto")
        ]

        tagsBuilt.addAll(buildImages(nodeImageBase, suffix, project.version.toString().toLowerCase(), nodeTaskMap))
        tagsBuilt.addAll(buildImages(firewallImageBase, suffix, project.version.toString().toLowerCase(), firewallTaskMap))

    }
}

task scanAllImages(dependsOn: [buildAllImages]) {
    doLast {

    }
}

task pushAllImages(dependsOn: [buildAllImages]) {
    doLast {
        pushImages(tagsBuilt)
    }
}

task pushOfficialImages(dependsOn: [buildOfficialZuluDockerImage, buildOfficialCorrettoDockerImage, buildOfficialAplineZuluDockerImage]){
    doLast{
        pushImages(zuluBuildTags)
        pushImages(alpineZuluBuildTags)
        pushImages(correttoBuildTags)
    }
}

task pushOfficialImages(dependsOn: [buildOfficialZuluDockerImage, buildOfficialCorrettoDockerImage])
