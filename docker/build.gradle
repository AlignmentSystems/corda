buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.spotify:docker-client:8.14.5'
    }
}


import com.spotify.docker.client.DefaultDockerClient
import com.spotify.docker.client.DockerClient
import com.spotify.docker.client.LoggingBuildHandler
import com.spotify.docker.client.messages.RegistryAuth

import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

evaluationDependsOn(":node:capsule")
evaluationDependsOn(":tools:dbmigration")

apply plugin: 'kotlin'
apply plugin: 'application'
// We need to set mainClassName before applying the shadow plugin.
mainClassName = 'net.corda.core.ConfigExporterMain'
apply plugin: 'com.github.johnrengelman.shadow'


dependencies {
    compile project(':node')
}

shadowJar {
    baseName = 'config-exporter'
    classifier = null
    version = null
    zip64 true
}

task buildDockerFolder(dependsOn: [":node:capsule:buildCordaJAR", shadowJar, ":tools:dbmigration:shadowJar"]) {
    doLast {
        def cordaJar = project(":node:capsule").buildCordaJAR.archivePath
        def dbmigrator = project(":tools:dbmigration").shadowJar.archivePath
        project.copy {
            into new File(project.buildDir, "docker-temp")
            from "src/bash/run-corda.sh"
            from "src/bash/db-migrate-create-jars.sh"
            from "src/bash/db-migrate-execute-migration.sh"
            from cordaJar
            from shadowJar.archivePath
            from dbmigrator
            from "src/config/starting-node.conf"
            from "src/bash/generate-config.sh"
            from "src/docker/DockerfileAL"
            from "src/docker/Dockerfile"
            rename(cordaJar.name, "corda.jar")
            rename(dbmigrator.name, "database-manager.jar")
            rename(shadowJar.archivePath.name, "config-exporter.jar")
        }
    }
}

final String runTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMddHHmmss"))
final String suffix = project.version.toString().toLowerCase().contains("snapshot") ? runTime : "RELEASE"
final GString[] zuluBuildTags = ["entdocker.corda.r3cev.com/corda-enterprise-zulu-${project.version.toString().toLowerCase()}:${suffix}", "entdocker.corda.r3cev.com/corda-enterprise-zulu-${project.version.toString().toLowerCase()}:latest"]
final GString[] correttoBuildTags = ["entdocker.corda.r3cev.com/corda-enterprise-corretto-${project.version.toString().toLowerCase()}:${suffix}", "entdocker.corda.r3cev.com/corda-enterprise-corretto-${project.version.toString().toLowerCase()}:latest"]

static buildImage(java.nio.file.Path dir, String dockerFile, GString[] tags) {
    println("Building image from ${dir.toAbsolutePath().toString()} using Dockerfile: ${dockerFile}")
    final DockerClient docker = DefaultDockerClient.fromEnv().build()
    def builtImageId = docker.build(dir, null, dockerFile, new LoggingBuildHandler())
    for (String tag : tags) {
        println("Tagging ${builtImageId} as: ${tag}")
        docker.tag(builtImageId, tag)
    }
}

static pushImages(GString[] imagesToPush) {
    final DockerClient docker = DefaultDockerClient.fromEnv().build()
    for (String tag : imagesToPush) {
        println("Pushing tag: ${tag}")
        docker.push(tag, RegistryAuth.create(System.env.DOCKER_USERNAME, System.env.DOCKER_PASSWORD, null, null, null, null))
    }
}

task buildOfficialZuluDockerImage(dependsOn: [buildDockerFolder]) {
    doLast {
        buildImage(new File(project.buildDir, "docker-temp").toPath(), "Dockerfile", zuluBuildTags)
        pushImages(zuluBuildTags)
    }
}

task buildOfficialCorrettoDockerImage(dependsOn: [buildDockerFolder]) {
    doLast {
        buildImage(new File(project.buildDir, "docker-temp").toPath(), "DockerfileAL", correttoBuildTags)
        pushImages(correttoBuildTags)
    }
}

task pushOfficialImages(dependsOn: [buildOfficialZuluDockerImage, buildOfficialCorrettoDockerImage])
