#!/usr/bin/env python

# Generate a static symbol table suitable for an environment with no runtime dynamic linker.
# The table must be sorted as we scan it using a binary search.

import os
import sys

if len(sys.argv) < 4:
    print("Usage: python gen_dispatch_table.py <PATH_TO_libavian.a> <PATH_TO_template> <OUTPUT_DIR>")
    sys.exit(1)

libavian_a_path = sys.argv[1]
template_path = sys.argv[2]
output_dir = sys.argv[3]

cmd = "nm --defined-only %s | awk '{print $3}' | egrep '^(Avian|Java|JVM)_.*'" % libavian_a_path
fname = "%s/dispatch_table.txt" % output_dir
os.system("echo '# This file lists all the JNI symbols that can be looked up. It was generated by gen_dispatch_table.py' >%s; %s >> %s" % (fname, cmd, fname))

entries = [l.strip() for l in open(fname, "r").readlines() if not l.startswith("#")]
entries.sort()
template_lines = file(template_path).readlines()
externs_index = template_lines.index("// EXTERNS HERE\n")
externs = ["void %s();\n" % entry for entry in entries]
template_lines[externs_index:externs_index + 1] = externs
dispatch_entries = ["{ \"%s\", vm::voidPointer(%s) },\n" % (e, e) for e in entries]
dispatch_entries_index = template_lines.index("// ENTRIES HERE\n")
template_lines[dispatch_entries_index:dispatch_entries_index + 1] = dispatch_entries
file("%s/dispatch_table.cpp" % output_dir, "w").writelines(template_lines)
