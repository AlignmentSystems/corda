package net.corda.sgx.attestation.service

import net.corda.sgx.attestation.entities.QuoteType
import net.corda.sgx.enclave.ECKey

/**
 * Information retrieved from message 2 in the Intel remote attestation flow.
 */
class ChallengerDetails(

        /**
         * The public elliptic curve key of the challenger, based on the NIST
         * P-256 elliptic curve.
         */
        val publicKey: ECKey,

        /**
         * The identifier of the service provider, also known as SPID.
         */
        val serviceProviderIdentifier: ByteArray,

        /**
         * Indicates the quote type, i.e., whether it is linkable or
         * un-linkable.
         */
        val quoteType: QuoteType,

        /**
         * The identifier of the key derivation function.
         */
        val keyDerivationFunctionIdentifier: Short,

        /**
         * An ECDSA signature of (g_b||g_a), using the challenger's ECDSA
         * private key corresponding to the public key specified in the
         * sgx_ra_init function, where g_b is the public elliptic curve key of
         * the challenger and g_a is the public key of application enclave,
         * provided by the application enclave, in the remote attestation and
         * key exchange message (message 1).
         */
        val signature: ByteArray,

        /**
         * The 128-bit AES-CMAC generated by the service provider. See
         * [sgx_ra_msg2_t](https://software.intel.com/en-us/node/709237)
         * for more details on its derivation.
         */
        val messageAuthenticationCode: ByteArray,

        /**
         * The Intel EPID signature revocation list certificate of the Intel
         * EPID group identified by the group identifier in the remote
         * attestation and key exchange message (message 1).
         */
        val signatureRevocationList: ByteArray

)
