<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
    <hashTree>
        <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
            <stringProp name="TestPlan.comments">This is a sample what is run for Corda performance testing at R3
            </stringProp>
            <boolProp name="TestPlan.functional_mode">false</boolProp>
            <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
            <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel"
                         testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="TestPlan.user_define_classpath"></stringProp>
        </TestPlan>
        <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                    <elementProp name="host" elementType="Argument">
                        <stringProp name="Argument.name">host</stringProp>
                        <stringProp name="Argument.value">Hostname of RPC target here</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <stringProp name="Argument.desc">Hostname of the target node that JMeter should connect to via
                            RPC (the node under test)
                        </stringProp>
                    </elementProp>
                    <elementProp name="port" elementType="Argument">
                        <stringProp name="Argument.name">port</stringProp>
                        <stringProp name="Argument.value">10003</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <stringProp name="Argument.desc">Configured RPC port of the target node</stringProp>
                    </elementProp>
                    <elementProp name="username" elementType="Argument">
                        <stringProp name="Argument.name">username</stringProp>
                        <stringProp name="Argument.value">RPC user name here</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <stringProp name="Argument.desc">User name as configured in the RPC credentials of the target
                            node
                        </stringProp>
                    </elementProp>
                    <elementProp name="password" elementType="Argument">
                        <stringProp name="Argument.name">password</stringProp>
                        <stringProp name="Argument.value">RPC password here</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <stringProp name="Argument.desc">Password as configured in the RPC credentials of the target
                            node
                        </stringProp>
                    </elementProp>
                    <elementProp name="notaryName" elementType="Argument">
                        <stringProp name="Argument.name">notaryName</stringProp>
                        <stringProp name="Argument.value">X500 name of the notary here</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <stringProp name="Argument.desc">The Corda X500 name of the notary to be used for these tests.
                        </stringProp>
                    </elementProp>
                    <elementProp name="otherPartyName" elementType="Argument">
                        <stringProp name="Argument.name">otherPartyName</stringProp>
                        <stringProp name="Argument.value">X500 name of reveiving node here</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <stringProp name="Argument.desc">The Corda X500 name of the node receiving funds in the payment
                            tests
                        </stringProp>
                    </elementProp>
                    <elementProp name="duration" elementType="Argument">
                        <stringProp name="Argument.name">duration</stringProp>
                        <stringProp name="Argument.value">300</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <stringProp name="Argument.desc">Runtime of the test in seconds - in our performance set-up,
                            each test step runs for 5 minutes.
                        </stringProp>
                    </elementProp>
                    <elementProp name="pause" elementType="Argument">
                        <stringProp name="Argument.name">pause</stringProp>
                        <stringProp name="Argument.value">30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <stringProp name="Argument.desc">Time to pause between two runs to let the system flush out in
                            seconds.
                        </stringProp>
                    </elementProp>
                    <elementProp name="remoteAgentCount" elementType="Argument">
                        <stringProp name="Argument.name">remoteAgentCount</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <stringProp name="Argument.desc">Number of remote JMeter agent connecting to the target node.
                            This is used for correct labelling of tests.
                        </stringProp>
                    </elementProp>
                    <elementProp name="firewallHost" elementType="Argument">
                        <stringProp name="Argument.name">firewallHost</stringProp>
                        <stringProp name="Argument.value">Hostname of RPC target for firewall tests here</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <stringProp name="Argument.desc">Hostname of the target node for tests using Corda
                            Float/Firewall
                        </stringProp>
                    </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">This plans uses variables to avoid repeating configuration values -
                    enter the details of your test network set-up here, all the rest of the plan should just work.
                </stringProp>
            </Arguments>
            <hashTree/>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Empty Flow 200 Thread Group ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">200</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
                <stringProp name="TestPlan.comments">Run empty flows to baseline RPC/serialisation overhead</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Empty Flow" enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${host}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.EmptyFlowSampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue 1 Thread Group ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">1</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Cash Issue" enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${host}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashIssueSampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue 5 Thread Group ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">5</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Cash Issue" enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${host}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashIssueSampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue 10 Thread Group ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">10</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Cash Issue" enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${host}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashIssueSampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue 20 Thread Group ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">20</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Cash Issue" enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${host}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashIssueSampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue 40 Thread Group ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">40</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Cash Issue" enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${host}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashIssueSampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue 60 Thread Group ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">60</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Cash Issue" enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${host}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashIssueSampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue 80 Thread Group ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">80</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Cash Issue" enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${host}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashIssueSampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue 100 Thread Group ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">100</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Cash Issue" enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${host}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashIssueSampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue 200 Thread Group ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">200</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Cash Issue" enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${host}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashIssueSampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue and Pay 1 Thread Group  ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">1</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Cash Issue and Pay Request"
                             enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${host}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="otherPartyName" elementType="Argument">
                                <stringProp name="Argument.name">otherPartyName</stringProp>
                                <stringProp name="Argument.value">${otherPartyName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfChangeStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfChangeStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="anonymousIdentities" elementType="Argument">
                                <stringProp name="Argument.name">anonymousIdentities</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashPaySampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue and Pay 2 Thread Group  ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">2</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Cash Issue and Pay Request"
                             enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${host}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="otherPartyName" elementType="Argument">
                                <stringProp name="Argument.name">otherPartyName</stringProp>
                                <stringProp name="Argument.value">${otherPartyName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfChangeStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfChangeStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="anonymousIdentities" elementType="Argument">
                                <stringProp name="Argument.name">anonymousIdentities</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashPaySampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue and Pay 5 Thread Group  ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">5</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Cash Issue and Pay Request"
                             enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${host}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="otherPartyName" elementType="Argument">
                                <stringProp name="Argument.name">otherPartyName</stringProp>
                                <stringProp name="Argument.value">${otherPartyName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfChangeStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfChangeStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="anonymousIdentities" elementType="Argument">
                                <stringProp name="Argument.name">anonymousIdentities</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashPaySampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue and Pay 10 Thread Group  ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">10</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Cash Issue and Pay Request"
                             enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${host}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="otherPartyName" elementType="Argument">
                                <stringProp name="Argument.name">otherPartyName</stringProp>
                                <stringProp name="Argument.value">${otherPartyName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfChangeStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfChangeStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="anonymousIdentities" elementType="Argument">
                                <stringProp name="Argument.name">anonymousIdentities</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashPaySampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue and Pay 20 Thread Group  ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">20</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Cash Issue and Pay Request"
                             enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${host}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="otherPartyName" elementType="Argument">
                                <stringProp name="Argument.name">otherPartyName</stringProp>
                                <stringProp name="Argument.value">${otherPartyName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfChangeStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfChangeStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="anonymousIdentities" elementType="Argument">
                                <stringProp name="Argument.name">anonymousIdentities</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashPaySampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue and Pay 30 Thread Group  ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">30</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Cash Issue and Pay Request"
                             enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${host}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="otherPartyName" elementType="Argument">
                                <stringProp name="Argument.name">otherPartyName</stringProp>
                                <stringProp name="Argument.value">${otherPartyName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfChangeStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfChangeStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="anonymousIdentities" elementType="Argument">
                                <stringProp name="Argument.name">anonymousIdentities</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashPaySampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue and Pay 40 Thread Group  ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">40</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Cash Issue and Pay Request"
                             enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${host}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="otherPartyName" elementType="Argument">
                                <stringProp name="Argument.name">otherPartyName</stringProp>
                                <stringProp name="Argument.value">${otherPartyName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfChangeStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfChangeStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="anonymousIdentities" elementType="Argument">
                                <stringProp name="Argument.name">anonymousIdentities</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashPaySampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue and Pay Firewall 1 Thread Group  ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">1</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler"
                             testname="Cash Issue and Pay Request Firewalled" enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${firewallHost}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="otherPartyName" elementType="Argument">
                                <stringProp name="Argument.name">otherPartyName</stringProp>
                                <stringProp name="Argument.value">${otherPartyName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfChangeStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfChangeStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="anonymousIdentities" elementType="Argument">
                                <stringProp name="Argument.name">anonymousIdentities</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashPaySampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue and Pay Firewall 5 Thread Group  ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">5</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler"
                             testname="Cash Issue and Pay Request Firewalled" enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${firewallHost}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="otherPartyName" elementType="Argument">
                                <stringProp name="Argument.name">otherPartyName</stringProp>
                                <stringProp name="Argument.value">${otherPartyName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfChangeStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfChangeStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="anonymousIdentities" elementType="Argument">
                                <stringProp name="Argument.name">anonymousIdentities</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashPaySampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue and Pay Firewall 10 Thread Group  ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">10</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler"
                             testname="Cash Issue and Pay Request Firewalled" enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${firewallHost}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="otherPartyName" elementType="Argument">
                                <stringProp name="Argument.name">otherPartyName</stringProp>
                                <stringProp name="Argument.value">${otherPartyName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfChangeStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfChangeStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="anonymousIdentities" elementType="Argument">
                                <stringProp name="Argument.name">anonymousIdentities</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashPaySampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue and Pay Firewall 20 Thread Group  ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">20</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler"
                             testname="Cash Issue and Pay Request Firewalled" enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${firewallHost}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="otherPartyName" elementType="Argument">
                                <stringProp name="Argument.name">otherPartyName</stringProp>
                                <stringProp name="Argument.value">${otherPartyName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfChangeStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfChangeStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="anonymousIdentities" elementType="Argument">
                                <stringProp name="Argument.name">anonymousIdentities</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashPaySampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue and Pay Firewall 30 Thread Group  ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">30</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler"
                             testname="Cash Issue and Pay Request Firewalled" enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${firewallHost}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="otherPartyName" elementType="Argument">
                                <stringProp name="Argument.name">otherPartyName</stringProp>
                                <stringProp name="Argument.value">${otherPartyName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfChangeStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfChangeStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="anonymousIdentities" elementType="Argument">
                                <stringProp name="Argument.name">anonymousIdentities</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashPaySampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue and Pay Firewall 40 Thread Group  ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">40</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler"
                             testname="Cash Issue and Pay Request Firewalled" enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${firewallHost}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="otherPartyName" elementType="Argument">
                                <stringProp name="Argument.name">otherPartyName</stringProp>
                                <stringProp name="Argument.value">${otherPartyName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfChangeStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfChangeStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="anonymousIdentities" elementType="Argument">
                                <stringProp name="Argument.name">anonymousIdentities</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashPaySampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue and Pay 5 states 40 Thread Group  ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">40</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler"
                             testname="Cash Issue and Pay 5 Request" enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${host}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="otherPartyName" elementType="Argument">
                                <stringProp name="Argument.name">otherPartyName</stringProp>
                                <stringProp name="Argument.value">${otherPartyName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfStatesPerTx</stringProp>
                                <stringProp name="Argument.value">5</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfChangeStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfChangeStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="anonymousIdentities" elementType="Argument">
                                <stringProp name="Argument.name">anonymousIdentities</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashPaySampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue and Pay 20 states 40 Thread Group  ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">40</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler"
                             testname="Cash Issue and Pay 20 Request" enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${host}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="otherPartyName" elementType="Argument">
                                <stringProp name="Argument.name">otherPartyName</stringProp>
                                <stringProp name="Argument.value">${otherPartyName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfStatesPerTx</stringProp>
                                <stringProp name="Argument.value">20</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfChangeStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfChangeStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="anonymousIdentities" elementType="Argument">
                                <stringProp name="Argument.name">anonymousIdentities</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashPaySampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue and Pay 40 states 40 Thread Group  ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">40</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler"
                             testname="Cash Issue and Pay 40 Request" enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${host}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="otherPartyName" elementType="Argument">
                                <stringProp name="Argument.name">otherPartyName</stringProp>
                                <stringProp name="Argument.value">${otherPartyName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfStatesPerTx</stringProp>
                                <stringProp name="Argument.value">40</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfChangeStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfChangeStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="anonymousIdentities" elementType="Argument">
                                <stringProp name="Argument.name">anonymousIdentities</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashPaySampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue and Pay 80 states 40 Thread Group  ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">40</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler"
                             testname="Cash Issue and Pay 80 Request" enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${host}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="otherPartyName" elementType="Argument">
                                <stringProp name="Argument.name">otherPartyName</stringProp>
                                <stringProp name="Argument.value">${otherPartyName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfStatesPerTx</stringProp>
                                <stringProp name="Argument.value">80</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfChangeStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfChangeStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="anonymousIdentities" elementType="Argument">
                                <stringProp name="Argument.name">anonymousIdentities</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashPaySampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue and Pay 160 states 40 Thread Group  ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">40</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler"
                             testname="Cash Issue and Pay 160 Request" enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${host}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="otherPartyName" elementType="Argument">
                                <stringProp name="Argument.name">otherPartyName</stringProp>
                                <stringProp name="Argument.value">${otherPartyName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfStatesPerTx</stringProp>
                                <stringProp name="Argument.value">160</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfChangeStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfChangeStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="anonymousIdentities" elementType="Argument">
                                <stringProp name="Argument.name">anonymousIdentities</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashPaySampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue and Pay 320 states 40 Thread Group  ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">40</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler"
                             testname="Cash Issue and Pay 320 Request" enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${host}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="otherPartyName" elementType="Argument">
                                <stringProp name="Argument.name">otherPartyName</stringProp>
                                <stringProp name="Argument.value">${otherPartyName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfStatesPerTx</stringProp>
                                <stringProp name="Argument.value">320</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfChangeStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfChangeStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="anonymousIdentities" elementType="Argument">
                                <stringProp name="Argument.name">anonymousIdentities</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashPaySampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup"
                         testname="Cash Issue and Pay 640 states 40 Thread Group  ${__machineName}" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel"
                             testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">40</stringProp>
                <stringProp name="ThreadGroup.ramp_time"></stringProp>
                <longProp name="ThreadGroup.start_time">1509455820000</longProp>
                <longProp name="ThreadGroup.end_time">1509455820000</longProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">${duration}</stringProp>
                <stringProp name="ThreadGroup.delay">${pause}</stringProp>
            </ThreadGroup>
            <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler"
                             testname="Cash Issue and Pay 640 Request" enabled="true">
                    <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel"
                                 testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="label" elementType="Argument">
                                <stringProp name="Argument.name">label</stringProp>
                                <stringProp name="Argument.value">
                                    ${__samplerName}-${__groovy(ctx.getThreadGroup().getNumThreads() * vars.get(&quot;remoteAgentCount&quot;).toInteger())}
                                </stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="host" elementType="Argument">
                                <stringProp name="Argument.name">host</stringProp>
                                <stringProp name="Argument.value">${host}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="port" elementType="Argument">
                                <stringProp name="Argument.name">port</stringProp>
                                <stringProp name="Argument.value">${port}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="username" elementType="Argument">
                                <stringProp name="Argument.name">username</stringProp>
                                <stringProp name="Argument.value">${username}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="Argument">
                                <stringProp name="Argument.name">password</stringProp>
                                <stringProp name="Argument.value">${password}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="notaryName" elementType="Argument">
                                <stringProp name="Argument.name">notaryName</stringProp>
                                <stringProp name="Argument.value">${notaryName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="otherPartyName" elementType="Argument">
                                <stringProp name="Argument.name">otherPartyName</stringProp>
                                <stringProp name="Argument.value">${otherPartyName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfStatesPerTx</stringProp>
                                <stringProp name="Argument.value">640</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="numberOfChangeStatesPerTx" elementType="Argument">
                                <stringProp name="Argument.name">numberOfChangeStatesPerTx</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="anonymousIdentities" elementType="Argument">
                                <stringProp name="Argument.name">anonymousIdentities</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="classname">com.r3.corda.jmeter.CashPaySampler</stringProp>
                </JavaSampler>
                <hashTree/>
            </hashTree>
            <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph"
                             enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                        <time>true</time>
                        <latency>true</latency>
                        <timestamp>true</timestamp>
                        <success>true</success>
                        <label>true</label>
                        <code>true</code>
                        <message>true</message>
                        <threadName>true</threadName>
                        <dataType>true</dataType>
                        <encoding>false</encoding>
                        <assertions>true</assertions>
                        <subresults>true</subresults>
                        <responseData>false</responseData>
                        <samplerData>false</samplerData>
                        <xml>false</xml>
                        <fieldNames>true</fieldNames>
                        <responseHeaders>false</responseHeaders>
                        <requestHeaders>false</requestHeaders>
                        <responseDataOnError>false</responseDataOnError>
                        <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                        <assertionsResultsToSave>0</assertionsResultsToSave>
                        <bytes>true</bytes>
                        <sentBytes>true</sentBytes>
                        <threadCounts>true</threadCounts>
                        <idleTime>true</idleTime>
                        <connectTime>true</connectTime>
                    </value>
                </objProp>
                <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results"
                             enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                        <time>true</time>
                        <latency>true</latency>
                        <timestamp>true</timestamp>
                        <success>true</success>
                        <label>true</label>
                        <code>true</code>
                        <message>true</message>
                        <threadName>true</threadName>
                        <dataType>true</dataType>
                        <encoding>false</encoding>
                        <assertions>true</assertions>
                        <subresults>true</subresults>
                        <responseData>false</responseData>
                        <samplerData>false</samplerData>
                        <xml>false</xml>
                        <fieldNames>true</fieldNames>
                        <responseHeaders>false</responseHeaders>
                        <requestHeaders>false</requestHeaders>
                        <responseDataOnError>false</responseDataOnError>
                        <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                        <assertionsResultsToSave>0</assertionsResultsToSave>
                        <bytes>true</bytes>
                        <sentBytes>true</sentBytes>
                        <threadCounts>true</threadCounts>
                        <idleTime>true</idleTime>
                        <connectTime>true</connectTime>
                    </value>
                </objProp>
                <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table"
                             enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                        <time>true</time>
                        <latency>true</latency>
                        <timestamp>true</timestamp>
                        <success>true</success>
                        <label>true</label>
                        <code>true</code>
                        <message>true</message>
                        <threadName>true</threadName>
                        <dataType>true</dataType>
                        <encoding>false</encoding>
                        <assertions>true</assertions>
                        <subresults>true</subresults>
                        <responseData>false</responseData>
                        <samplerData>false</samplerData>
                        <xml>false</xml>
                        <fieldNames>true</fieldNames>
                        <responseHeaders>false</responseHeaders>
                        <requestHeaders>false</requestHeaders>
                        <responseDataOnError>false</responseDataOnError>
                        <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                        <assertionsResultsToSave>0</assertionsResultsToSave>
                        <bytes>true</bytes>
                        <sentBytes>true</sentBytes>
                        <threadCounts>true</threadCounts>
                        <idleTime>true</idleTime>
                        <connectTime>true</connectTime>
                    </value>
                </objProp>
                <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
        </hashTree>
        <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
            <boolProp name="WorkBench.save">true</boolProp>
        </WorkBench>
        <hashTree/>
    </hashTree>
</jmeterTestPlan>
